package main

import (
	"fmt"
	"os"
	"strings"
	"time"
)

var globalConfig Config

func pageIP() error {
	// Отображаем текущий IP на экране
	err := lcdClear()
	if err != nil {
		return err
	}
	err = lcdWriteFontText3("Edit IP:", 0, 0)
	if err != nil {
		return err
	}
	err = lcdWriteFontText3(globalConfig.IP, 1, 0)
	if err != nil {
		return err
	}
	return nil
}

// Функция для редактирования IP-адреса
func editIP() (string, error) {
	// Разбиваем текущий IP на октеты
	octets := strings.Split(globalConfig.IP, ".")
	if len(octets) != 4 {
		return globalConfig.IP, fmt.Errorf("некорректный формат IP: %s", globalConfig.IP)
	}

	currentOctet := 0 // Индекс текущего октета (0-3)
	values := make([]int, 4)
	for i, octet := range octets {
		var val int
		_, err := fmt.Sscanf(octet, "%d", &val)
		if err != nil || val < 0 || val > 255 {
			return globalConfig.IP, fmt.Errorf("некорректное значение октета: %s", octet)
		}
		values[i] = val
	}

	for {
		// Обновляем отображение
		newIP := fmt.Sprintf("%d.%d.%d.%d", values[0], values[1], values[2], values[3])
		err := lcdClear()
		if err != nil {
			return globalConfig.IP, err
		}
		err = lcdWriteFontText3("Edit IP:", 0, 0)
		if err != nil {
			return globalConfig.IP, err
		}
		err = lcdWriteFontText3(newIP, 1, 0)
		if err != nil {
			return globalConfig.IP, err
		}
		// Подчёркиваем текущий октет (например, символом ">")
		err = lcdWriteFontText3(">", 1, currentOctet*4+len(fmt.Sprintf("%d", values[currentOctet])))
		if err != nil {
			return globalConfig.IP, err
		}

		key := GetCurrentKey()
		switch key {
		case "UP":
			// Увеличиваем значение текущего октета
			values[currentOctet]++
			if values[currentOctet] > 255 {
				values[currentOctet] = 0
			}
		case "DOWN":
			// Уменьшаем значение текущего октета
			values[currentOctet]--
			if values[currentOctet] < 0 {
				values[currentOctet] = 255
			}
		case "RIGHT":
			// Переходим к следующему октету
			currentOctet++
			if currentOctet > 3 {
				currentOctet = 0
			}
		case "LEFT":
			// Переходим к предыдущему октету
			currentOctet--
			if currentOctet < 0 {
				currentOctet = 3
			}
		case "ENT":
			// Подтверждаем изменения и возвращаем новый IP
			return fmt.Sprintf("%d.%d.%d.%d", values[0], values[1], values[2], values[3]), nil
		case "ESC":
			// Отменяем редактирование, возвращаем старый IP
			return globalConfig.IP, nil
		}
		time.Sleep(100 * time.Millisecond)
	}
}
func lcdWriteFontText3(text string, page, col int) error {
	err := lcdSetPosition(page, col)
	if err != nil {
		return err
	}

	for _, r := range text {
		charData, ok := Font8[r]
		if !ok {

			charData = [8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
		}

		for _, b := range charData {
			if err := lcdWriteData(b); err != nil {
				return err
			}
		}

		// Добавить 1 байт пустоты между символами (опционально)
		// if err := lcdWriteData(0x00); err != nil {
		// 	return err
		// }
	}

	return nil
}
func GetCurrentKey() string {
	keyMutex.Lock()
	defer keyMutex.Unlock()
	return currentKey
}

func main() {
	go mainkey()
	defer func() {
		if err := cleanupGPIO(); err != nil {
			fmt.Fprintf(os.Stderr, "Ошибка очистки GPIO: %v\n", err)
		}
	}()

	configFile := "config.json"
	config, err := LoadOrCreateConfig(configFile)
	if err != nil {
		fmt.Printf("Ошибка загрузки конфигурации: %v\n", err)
		return
	}
	globalConfig = config

	if err := lcdInitPins(); err != nil {
		fmt.Fprintf(os.Stderr, "Ошибка инициализации пинов: %v\n", err)
		os.Exit(1)
	}
	time.Sleep(30 * time.Millisecond)

	if err := lcdInit(); err != nil {
		fmt.Fprintf(os.Stderr, "Ошибка инициализации LCD: %v\n", err)
		os.Exit(1)
	}
	time.Sleep(30 * time.Millisecond)

	if err := lcdClear(); err != nil {
		fmt.Fprintf(os.Stderr, "Ошибка очистки LCD: %v\n", err)
		os.Exit(1)
	}
	if err := page11(); err != nil {
		fmt.Fprintf(os.Stderr, "Ошибка отображения page11: %v\n", err)
		os.Exit(1)
	}

	// Добавляем страницу редактирования IP в список страниц
	pages := []func() error{page1, page2, page3, page4, pageIP}

	currentPage := 0
	selected := false // false = режим просмотра, true = режим выбора

	for {
		key := GetCurrentKey()

		if selected {
			switch key {
			case "UP":
				currentPage++
				if currentPage >= len(pages) {
					currentPage = 0
				}
				_ = lcdClear()
				_ = pages[currentPage]()
			case "DOWN":
				currentPage--
				if currentPage < 0 {
					currentPage = len(pages) - 1
				}
				_ = lcdClear()
				_ = pages[currentPage]()
			case "ENT":
				if currentPage == len(pages)-1 { // Если выбрана страница pageIP
					newIP, err := editIP()
					if err != nil {
						fmt.Fprintf(os.Stderr, "Ошибка редактирования IP: %v\n", err)
						_ = lcdClear()
						_ = page11()
						selected = false
						continue
					}
					globalConfig.IP = newIP
					err = SaveConfig(globalConfig, configFile)
					if err != nil {
						fmt.Fprintf(os.Stderr, "Ошибка сохранения конфигурации: %v\n", err)
						_ = lcdClear()
						_ = page11()
						selected = false
						continue
					}
					// После сохранения возвращаемся на дефолтную страницу
					_ = lcdClear()
					_ = page11()
					selected = false
				} else {
					// Для других страниц просто выходим из режима выбора
					selected = false
				}
			case "ESC":
				// Отмена выбора — возврат на дефолтную page11
				selected = false
				_ = lcdClear()
				_ = page11()
			}
		} else {
			if key == "ENT" {
				// Вход в режим выбора и отображение текущей страницы
				selected = true
				_ = lcdClear()
				_ = pages[currentPage]()
			}
		}

		time.Sleep(100 * time.Millisecond)
	}
}

// func main() {
// 	go mainkey()
// 	defer func() {
// 		if err := cleanupGPIO(); err != nil {
// 			fmt.Fprintf(os.Stderr, "Failed to cleanup GPIO: %v\n", err)
// 		}
// 	}()
// 	configFile := "config.json"
// 	config, err := LoadOrCreateConfig(configFile)
// 	globalConfig = config
// 	if err != nil {
// 		fmt.Printf("Ошибка: %v\n", err)
// 		return
// 	}

// 	// Используйте config.IP, config.Set1, config.Set2, config.Set3 в вашем коде
// 	// fmt.Printf("IP: %s, Set1: %v, Set2: %v, Set3: %v\n", config.IP, config.Set1, config.Set2, config.Set3)
// 	if err := lcdInitPins(); err != nil {
// 		fmt.Fprintf(os.Stderr, "Failed to initialize pins: %v\n", err)
// 		os.Exit(1)
// 	}
// 	time.Sleep(30 * time.Millisecond)

// 	if err := lcdInit(); err != nil {
// 		fmt.Fprintf(os.Stderr, "Failed to initialize LCD: %v\n", err)
// 		os.Exit(1)
// 	}
// 	time.Sleep(30 * time.Millisecond)

// 	if err := lcdClear(); err != nil {
// 		fmt.Fprintf(os.Stderr, "Failed to clear LCD: %v\n", err)
// 		os.Exit(1)
// 	}
// 	if err := page11(); err != nil {
// 		fmt.Fprintf(os.Stderr, "Failed to page1: %v\n", err)
// 		os.Exit(1)
// 	}
// 	// config.IP = "192.168.120.105" // Новое значение IP
// 	err = SaveConfig(config, configFile)
// 	if err != nil {
// 		fmt.Printf("Ошибка при сохранении конфигурации: %v\n", err)
// 		return
// 	}

// 	pages := []func() error{page1, page2, page3, page4}

// 	currentPage := 0
// 	selected := false // false = режим просмотра, true = режим выбора

// 	// Отображаем дефолтную страницу page11()
// 	if err := page11(); err != nil {
// 		fmt.Fprintf(os.Stderr, "Ошибка при запуске page11: %v\n", err)
// 		os.Exit(1)
// 	}

// 	for {
// 		key := GetCurrentKey()

// 		if selected {
// 			switch key {
// 			case "UP":
// 				currentPage++
// 				if currentPage >= len(pages) {
// 					currentPage = 0
// 				}
// 				_ = lcdClear()
// 				_ = pages[currentPage]() // сразу отображаем страницу

// 			case "DOWN":
// 				currentPage--
// 				if currentPage < 0 {
// 					currentPage = len(pages) - 1
// 				}
// 				_ = lcdClear()
// 				_ = pages[currentPage]() // сразу отображаем страницу

// 			case "ENT":
// 				// подтверждение — просто остаёмся на текущей странице и выходим из выбора
// 				selected = false

// 			case "ESC":
// 				// отмена выбора — возврат на дефолтную page11
// 				selected = false
// 				_ = lcdClear()
// 				_ = page11()
// 			}
// 		} else {
// 			if key == "ENT" {
// 				// вход в режим выбора и сразу показываем текущую страницу
// 				selected = true
// 				_ = lcdClear()
// 				_ = pages[currentPage]()
// 			}
// 		}

// 		time.Sleep(100 * time.Millisecond)
// 	}

// }

// if err := mainkey(); err != nil {
// 	fmt.Fprintf(os.Stderr, "Failed to page1: %v\n", err)
// 	os.Exit(1)
// }
// for {
// 	key := GetCurrentKey()
// 	if key != "" {
// 		// fmt.Println("Текущее состояние клавиши:", key)
// 	}

// 	// Можно выполнять действия в зависимости от нажатия:
// 	if key == "ENT" {
// 		_ = page12()

// 	}
// 	time.Sleep(500 * time.Millisecond)
// }

// key := GetCurrentKey()
// switch key {
// case "UP":
// 	_ = lcdClear()
// 	_ = lcdWriteFontText3("UP PRESS", 0, 0)
// case "ESC":
// 	_ = lcdClear()
// 	_ = lcdWriteFontText3("ESC PRESS", 0, 0)
// case "ENT":
// 	_ = lcdClear()
// 	_ = lcdWriteFontText3("ENT PRESS", 0, 0)
// case "DOWN":
// 	_ = lcdClear()
// 	_ = lcdWriteFontText3("DOWN PRESS", 0, 0)
// case "NO_KEY":
// 	_ = page1()
// }
